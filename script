#! /usr/bash

usage () {
    echo "Usage: '$0' <source file> <target aws bucket> <profile name> [-new filename]"
    exit 1
}

enforce_supported_filename(){
    local proposed_filename="$1"
    while [[ "$proposed_filename" =~ [^a-zA-Z0-9] ]]
    do
        read -rp "Your new file name contains unsupported characters.\nFor cross-platform compatibility, file names can only contain alphanumeric characters: [a-zA-Z0-9].\nPlease provide another name: " proposed_filename
    done
    echo "$proposed_filename"
}

get_encrypt_key(){
    dd if=/dev/random of="${new_filename}_key.bin" bs=32 count=1 iflag=fullblock &> "/dev/null"
    key="fileb://${new_filename}_key.bin"
}

#validate min. number of args
if [[ $# -lt 3 || $# -gt 4 ]];
then
    echo "Please provide 3 or 4 arguments."
    usage
else
    source_file="$1"
    target_bucket="$2"
    profile_name="$3"
fi

#validate new file name
if [[ $# -eq 3 ]]
then
    new_filename="$1"
else
    new_filename=$(enforce_supported_filename "$4")    
fi 

#validate source file
if [[ -e "$source_file" ]];
then
    if [[ -r "$source_file" ]];
    then
        if [[ -f "$source_file" ]];
        then
            :
        elif [[ -d "$source_file" ]];
        then
            while true; 
            do
                read -r -p "You're attempting to upload a directory and all of its content, continue? Y-[Yes], N-[No, cancel]" recursive
                case "$recursive" in
                    [Yy])
                        recursive="--recursive"
                        break
                        ;;
                    [Nn])
                        echo "Operation cancelled."
                        exit 1
                        ;;
                    *)
                        echo "Invalid response, please try again"
                        ;;
                esac
            done
        else
            echo "Invalid source file type. Please try again."
            exit 1
        fi
    else
        echo "Sorry, you don't have read permissions for the source file"
        exit 1
    fi
else
    echo "The file/directory $source_file does not exist. Please try again."
    exit 1
fi

storage_classses=("STANDARD" "REDUCED_REDUNDANCY" "STANDARD_IA" "ONEZONE_IA" "INTELLIGENT_TIERING" "GLACIER" "DEEP_ARCHIVE" "GLACIER_IR")

specify_storage(){
    while true;
    do
        read -rp "Please specify your target storage class by entering a number: (0) STANDARD | (1) REDUCED_REDUNDANCY | (2) STANDARD_IA | (3) ONEZONE_IA | (4) INTELLIGENT_TIERING | (5) GLACIER | (6) DEEP_ARCHIVE | (7) GLACIER_IR. " user_input
        if [[ "$user_input" =~ ^[0-9]+$ ]]
        then
            echo -e "You have entered an invalid input"
        else
            if [[ $user_input -ge 0 && $user_input -le 7 ]]
            then
                storage_class=${storage_classses[$user_input]}
                break
            else
                echo -e "Please choose a number between 0 and 7\n"
            fi
        fi
    done
}

config_file="$HOME/.aws/config"

# Check that AWS is installed and correctly configured
if ! command -v aws &> /dev/null
then
    if [[ -e "./awscliv2.zip" && -s "./awscliv2.zip" ]];
    then
        unzip awscliv2.zip && sudo ./aws/install
    elif [[ -e "./aws" && -s "./aws" ]]; 
    then
        sudo ./aws/install
    else
        #No AWS CLI installation files found, download and install
        echo "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install
        
        exit_code=$?
        
        if [ $exit_code -ne 0 ]; 
        then
            echo "Unable to auto-install AWS CLI. Please install manually and retry file upload." 
            exit 1
        else
            echo "Installation completed. Please set up credentials in $config_file"
        fi 
    fi
else
    # Check if the config file exists and is readable
    if [[ -e "$config_file" && -r "$config_file" ]]
    then
        # Check if the config file contains the required credentials
        if grep -q "aws_secret_access_key" "$config_file" 
        then
            :
        else
            echo -e "Configuration file does not contain required credentials.\nPlease ensure it contains the necessary credential key-and-values pairs."
            exit 1
        fi
    else
        echo -e "Configuration file not properly set up.\nPlease ensure the file is located at: $config_file and is readable."
        exit 1
    fi
fi


if ! command -v pv &> /dev/null
then
    sudo apt-get update
    sudo apt-get install -y pv
fi
pv_exit_code=$?

#check duplicate in target bucket
if [[ $pv_exit_code -eq 0 ]];
then
    file_in_bucket=$(aws s3 ls "s3://$target_bucket/$new_filename" --profile "$profile_name" --human-readable)
fi

#upload file
if [[ -z $file_in_bucket ]];
then
    get_encrypt_key "$new_filename"
    response=$(pv "$source_file" | aws s3 cp - "s3://$target_bucket/$new_filename" --profile "$profile_name" --sse-c --sse-c-key "$key" ${recursive:+$recursive} --storage-class "$storage_class")
    successful=$?
else
    echo -e "\nTarget bucket $target_bucket contains the possibly duplicate item(s) below:"
    echo "$file_in_bucket"
    while true;
    do
        read -rp "Would you like to (r)ename, (o)verwrite, or (c)ancel this upload: " sync_op
        echo
        case "$sync_op" in
            [Rr])
                read -rp "What would you like to rename your file? : " file_rename
                new_filename=$(enforce_supported_filename "$file_rename")
                get_encrypt_key "$new_filename"
                response=$(pv "$source_file" | aws s3 cp - "s3://$target_bucket/$new_filename" --profile "$profile_name" --sse-c --sse-c-key "$key" ${recursive:+$recursive} --storage-class "$storage_class")
                successful=$?
                break
                ;;
            [Oo])
                get_encrypt_key "$new_filename"
                aws s3 rm "s3://$target_bucket/$new_filename" --profile "$profile_name" --quiet
                response=$(pv "$source_file" | aws s3 cp - "s3://$target_bucket/$new_filename" --profile "$profile_name" --sse-c --sse-c-key "$key" ${recursive:+$recursive} --storage-class "$storage_class")
                successful=$?
                break
                ;;
            [Cc])
                echo "Upload cancelled."
                exit 1
                ;;
            *)
                echo "Invalid response, please try again"
                ;;
        esac
    done
fi

if [ ! "$successful" ]
then
    echo -e "ERROR:  AWS reports s3api copy-object operation failed.\n$response"
    exit 1
else

    echo -e "$response\nOperation successful."
fi