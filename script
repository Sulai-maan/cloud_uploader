#! /usr/bash

usage () {
    echo "Usage: '$0' <source file> <target aws bucket> [-new filename]"
    exit 1
}

#validate min. number of args
if [[ $# -lt 2 || $# -gt 3 ]];
then
    echo "Please provide 2 or 3 arguments."
    usage
fi

source_file="$1"
target_bucket="$2"

if [[ $# -eq 3 ]];
then   
    new_filename="$3"
    #validate new_filename
    if [[ $new_filename =~ [^a-zA-Z0-9!-_().*\'] ]];
    then
        printf "Your new file name contains unwanted characters.\n"
        printf "To allow for cross-platform compatibility, new file names can only contain the following characters[a-zA-Z0-9!-_.*']"
        exit 1
    fi
fi

#validate source file
if [[ -e "$source_file" ]];
then
    if [[ -r "$source_file" ]];
    then
        if [[ -f "$source_file" ]];
        then
            :
        elif [[ -d "$source_file" ]];
        then
            while true; 
            do
                read -r -p "You're attempting to upload a directory and all of its content, continue? Y-[Yes], N-[No, cancel]" recursive
                case "$recursive" in
                    [Yy])
                        recursive=true
                        break
                        ;;
                    [Nn])
                        echo "Operation cancelled."
                        exit 1
                        ;;
                    *)
                        echo "Invalid response, please try again"
                        ;;
                esac
            done
        else
            echo "Invalid source file type. Please try again."
            exit 1
        fi
    else
        echo "Sorry, you don't have read permissions for the source file"
        exit 1
    fi
else
    echo "There's no such file or directory. Please try again."
    exit 1
fi

#Accept and validate against empty input
read_input(){
    local prompt=$1
    local clean_input=$2
    local user_input

    #validate entry
    while true;
    do
        read -r -p "$prompt" user_input
        if [[ -n $user_input ]];
        then
            eval "$clean_input='$user_input'"
            break
        else
            echo "Input cannot be empty! Please try again" 
        fi
    done
}

#if AWS CLI isn't installed, install and configure
aws_cli_path="/usr/local/aws-cli/v2/current/bin/aws"
aws_config_dir=("$HOME/.aws/credentials" "$HOME/.aws/config")

if [[ -e "$aws_cli_path" && -s "$aws_cli_path" ]]; then
    
    #check for credentials
    loop_completed=true

    for file in "${aws_config_dir[@]}"; do
        if [[ -e "$file" ]] && grep -q "aws_access_key_id" "$file"; then
            echo "Configuration file exists."
            loop_completed=false
            break
        fi
    done

    #If configurations don't exist, set up config
    if [ $loop_completed = true ]; then
        echo -e "Setting up AWS CLI configuration...\n" 
        read_input "Please provide your AWS IAM user access key id:" accesskey_id
        read_input "Enter the secret access key:" secret_access_key
        read_input "Please enter your account's default region(e.g. us-west-2):" default_region

        cat <<- EOF > "${aws_config_dir[1]}"
[default]
aws_access_key_id = $accesskey_id
aws_secret_access_key = $secret_access_key
region=$default_region
output=json

EOF

    fi
else
    #AWS CLI not installed, install and configure
    echo "Installing AWS CLI..."
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install
    
    exit_code=$?
    
    #If installation was successful, configure creditials
    if [ $exit_code -eq 0 ]; then
        echo -e "Setting up AWS CLI configuration...\n" 
        read_input "Please provide your AWS IAM user access key id:" accesskey_id
        read_input "Enter the secret access key:" secret_access_key
        read_input "Please enter your account's default region(e.g. us-west-2):" default_region

        cat <<- EOF > "${aws_config_dir[1]}"
[default]
aws_access_key_id = $accesskey_id
aws_secret_access_key = $secret_access_key
region=$default_region
output=json

EOF
    chmod 400 "${aws_config_dir[1]}"
    else
        echo "Unable to auto-install AWS CLI. Please install manually and try again."   
    fi 
fi


#create AWS CLI profile for IAM role
echo "Setting up profile to use for task..."
read_input "Please provide the arn for the IAM role to be used for this task:" aws_role_arn

cat <<- EOF >> "${aws_config_dir[1]}"
[profile cloud_send]
role_arn= $aws_role_arn
source_profile = default
EOF

