#! /usr/bash

usage () {
    echo "Usage: '$0' <source file> <target aws bucket> [-new filename]"
    exit 1
}

#validate min. number of args
if [[ $# -lt 2 || $# -gt 3 ]];
then
    echo "Please provide 2 or 3 arguments."
    usage
fi

source_file="$1"
target_bucket="$2"

if [[ $# -eq 3 ]];
then   
    change_filename=true
    new_filename="$3"
    #validate new_filename
    if [[ $new_filename =~ [^a-zA-Z0-9!-_().*\'] ]];
    then
        printf "Your new file name contains unwanted characters.\n"
        printf "To allow for cross-platform compatibility, new file names can only contain the following characters[a-zA-Z0-9!-_.*']"
        exit 1
    fi
else
    change_filename=false
fi

#validate source file
if [[ -e "$source_file" ]];
then
    if [[ -r "$source_file" ]];
    then
        if [[ -f "$source_file" ]];
        then
            :
        elif [[ -d "$source_file" ]];
        then
            while true; 
            do
                read -r -p "You're attempting to upload a directory and all of its content, continue? Y-[Yes], N-[No, cancel]" recursive
                case "$recursive" in
                    [Yy])
                        recursive=true
                        break
                        ;;
                    [Nn])
                        echo "Operation cancelled."
                        exit 1
                        ;;
                    *)
                        echo "Invalid response, please try again"
                        ;;
                esac
            done
        else
            echo "Invalid source file type. Please try again."
            exit 1
        fi
    else
        echo "Sorry, you don't have read permissions for the source file"
        exit 1
    fi
else
    echo "There's no such file or directory. Please try again."
    exit 1
fi

#Accept and validate against empty input
read_input(){
    local prompt=$1
    local clean_input=$2
    local user_input

    #validate entry
    while true;
    do
        read -rp "$prompt" user_input
        if [[ -n $user_input ]];
        then
            eval "$clean_input='$user_input'"
            break
        else
            echo "Input cannot be empty! Please try again" 
        fi
    done
}

read_secret_input(){
    local prompt=$1
    local clean_input=$2
    local user_input

    #validate entry
    while true;
    do
        read -rsp "$prompt" user_input
        if [[ -n $user_input ]];
        then
            eval "$clean_input='$user_input'"
            break
        else
            echo "Input cannot be empty! Please try again" 
        fi
    done
}

#if AWS CLI isn't installed, install and configure

aws_cli_path=$(which aws)

if [[ -n "$aws_cli_path" ]]; then
    
    #check that credentials exist
	echo -e "AWS installed, checking for credentials...\n"
    if [[ -e "$HOME/.aws/credentials" ]] && grep -q "aws_access_key_id" "$HOME/.aws/credentials";
    then
        echo "Credentials file found."
    elif [[ -e "$HOME/.aws/config" ]] && grep -q "aws_access_key_id" "$HOME/.aws/config";
    then
        echo "Config file found"
    else
    #Set up config
		echo "No aws config file found, trying to set up config"
        if [[ ! -e "$HOME/.aws" ]];
        then
            mkdir "$HOME/.aws"     
        fi
        touch "$HOME/.aws/config" && chmod -R 600 "$HOME/.aws/config"
        #configure_profile $read_secret_input $read_input
        echo -e "Setting up AWS CLI configuration...\n" 
        read_secret_input "Please provide your AWS IAM user access key id:" accesskey_id
        echo
        read_secret_input "Enter the secret access key:" secret_access_key
        echo
        read_input "Please enter your account's default region(e.g. us-west-2):" default_region
        # echo -e "[default]\naws_access_key_id = $accesskey_id\naws_secret_access_key = $secret_access_key\n# region=$default_region\noutput=json\n" >> "$HOME/.aws/config"
        tee "$HOME/.aws/config" <<- EOF > /dev/null
        [default]
        aws_access_key_id = $accesskey_id
        aws_secret_access_key = $secret_access_key
        region=$default_region
        output=json
		EOF
		echo "New config written to file"
    fi
#If AWS CLI is already downloaded, install
elif [[ -e "./awscliv2.zip" && -s "./awscliv2.zip" ]];
then
    unzip awscliv2.zip && sudo ./aws/install
elif [[ -e "./aws" && -s "./aws" ]]; 
then
    sudo ./aws/install
else
    #AWS CLI not installed, install and configure
    echo "Installing AWS CLI..."
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && sudo ./aws/install
    
    exit_code=$?
    
    #If installation was successful, configure creditials
    if [ $exit_code -eq 0 ]; then
        mkdir "$HOME/.aws" && touch "$HOME/.aws/config" && chmod -R 600 "$HOME/.aws/config"
        #configure_profile $read_secret_input $read_input
        echo -e "Setting up AWS CLI configuration...\n" 
        read_secret_input "Please provide your AWS IAM user access key id:\n" accesskey_id
        echo
        read_secret_input "Enter the secret access key:" secret_access_key
        echo
        read_input "Please enter your account's default region(e.g. us-west-2):/n" default_region
        # echo -e "[default]\naws_access_key_id = $accesskey_id\naws_secret_access_key = $secret_access_key\nregion=$default_region\noutput=json\n" >> "$HOME/.aws/config"
        tee "$HOME/.aws/config" <<- EOF > /dev/null
        [default]
        aws_access_key_id = $accesskey_id
        aws_secret_access_key = $secret_access_key
        region=$default_region
        output=json
		EOF

    else
        echo "Unable to auto-install AWS CLI. Please install manually and try again."   
    fi 
fi

#create AWS CLI profile for IAM role
echo "Setting up profile to use for task..."
read_secret_input "Please provide the arn for the IAM role to be used for this task:" aws_role_arn

tee -a "$HOME/.aws/config" <<- EOF > /dev/null
[profile cloud_send]
role_arn= $aws_role_arn
source_profile = default
EOF

prof_config=$?

if [[ $prof_config -eq 0 ]];
then
    echo "Profile setup successful!"
else
    echo "There was a problem setting up your profile. Please try again."
    exit 1
fi

#upload file
if $change_filename;
then
    response=$(aws s3 cp "$source_file" "s3://$target_bucket/$new_filename" --profile cloud_send)
else
    response=$(aws s3 cp "$source_file" "s3://$target_bucket/$source_file" --profile cloud_send)
fi

# upload_status=$?
# if [[ $upload_status -eq 0 ]];
# then
#     echo "Operation successful. File upload completed"
# else
#     echo "Operation failed"
# fi

if [[ $? -ne 0 ]];
then
    echo -e "ERROR:  AWS reports s3api copy-object operation failed.\n$response"
    exit 1
else
    echo -e "Operation successful"
fi